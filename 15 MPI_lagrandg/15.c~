#include<stdio.h>
#include <mpi.h>

int main(int argc,char *argv[])
{
    int myid,numprocs;
    int p,i,low,high;
    int source;
    int x[4];
    int y[4];
    int X=1;
    float sum;
    int tag = 0;
    float temp1,temp2;
    float temp;
    MPI_Status status;
    MPI_Init(&argc,&argv);
    MPI_Comm_rank(MPI_COMM_WORLD,&myid);
    MPI_Comm_size(MPI_COMM_WORLD,&numprocs);
	p = 4/numprocs; 
	low = myid * p;
	high = low + p;
    if(myid==0)
    {
        for(i=0;i<4;i++)
        {
		x[i]=i;
		y[i]=i;
	} 
    }
    MPI_Bcast(x,4,MPI_INT,0,MPI_COMM_WORLD);
    MPI_Bcast(y,4,MPI_INT,0,MPI_COMM_WORLD);
	
   temp1=1;
   for(i=low;i<high;i++)
   {
       temp1*=(X-x[i]);
   }
   temp2=1;

   for(i=low;i<high;i++)
   {
       temp2*=(x[myid]-x[i]);
   }
   temp=temp1/temp2;
   temp=temp*y[myid];
   MPI_Reduce(&temp,&sum,1,MPI_FLOAT,MPI_SUM,0,MPI_COMM_WORLD);
   if(myid == 0)
	printf("%f\n",(float)X);
    MPI_Finalize();
    return 0;
}

